DAT037 Lab 3 
Group 56


Analysis of time complexity of methods associated with APrioMap
When using Hash functions, we assume it is perfect.

put()
(Line 18) containsKey() on HashMap is O(1).
(Line 20) heap.remove() in FastBinHeap is O(log(n)), where n is the number of elements in the heap. 
Finding the element is O(1) since the index of the element is stored in a HashMap and can be retrieved in constant time. The heap will then need to use bubbleUp or bubbleDown to restore the sorted structure, which will have a O(log(n)) time complexity. map.get() is O(1).
(Line 22) declare and initialize a new Pair is O(1)
(Line 24) map.put() is O(1).
(Line 26) heap.add() is O(log(n)), where n is the number of elements in the heap.
In total, put() is of time complexity O(log(n)), where n is the number of elements in the PrioMap

get()
(Line 31 - 38) All operations in get() are O(1).

peek()
(Line 42) heap.peek() is O(1)
Thus peek() in APrioMap is also O(1)

poll()
(Lines 47 - 49) heap.peek() and comparison is O(1)
(Line 51) map.remove() is O(1)
(Line 53) heap.poll() is O(log(n)), where n is the number of elements in the PrioMap, since we remove one element in the heap and may call bubbleDown in fastBinHeap 
In total, poll() in APrioMap is O(log(n)), where n is the number of elements







Analysis of time complexity of method shortestPath

Here, the number of vertices in the graph is denoted by |V| and the number of edges by |E|.

(Lines 57-61) Declaring and instantiating local variables is O(1).

(Lines 64-66) nodeList.get(i) is O(1), and thus initializing verticeCost for all nodes in graph is 
O(|V| * log(|V|)), since verticeCost.put() is O(log(|V|)) according to the previous analysis of the time complexity of put() method in APrioMap.

(Line 69) Updating the value of the startnode in verticeCost is mentioned O(log|V|) since that is the time complexity of verticeCost.put().

(Lines 71 - 98) The while loop will run at most |V| times, which will happen if node dest is the last one to be checked.

(Line 73) Declaring a new Pair object and polling from the APrioMap is O(log(|V|)) according to our previous analysis.

(Lines 75 - 81) Adding a map entry in the HashMap bestCost is O(1). Retrieving a list of all neighbours to the current node is O(1) since we use a Hash map.

(Lines 82 - 97) The for loop will execute at most 2*|E| times, giving it a time complextiy of O(|E| * 'complexity of operations inside for')

(Lines 85 - 91) All these operations are O(1). In the worst case scenario, we will enter the if in each loop.

(Line 93) verticeCost.put() is as previously mentioned O(log(|V|)).
(Line 94) parent.put is O(1).
 
The foor loop which possibly may loop through all neighbours of all nodes and update verticeCost
each time will therefor have a worst case time complexity of O(|E|*log(|V|)).

The while loop on lines 71 - 98 will thus in total have a time complexity of O((|V| + |E|)*log(|V|)).

(Lines 101 - 103) Declaring and instantiating an ArrayList is O(1) as well as the operation of adding nodes to said List. 

(Lines 104 - 107) The while loop collecting all predecessors to the destination node will at worst case execute |V| times, giving a time complexity of O(|V|) since both adding to the list and collecting a value from the parent hash map are O(1).

Reversing the list of nodes will have a O(|parentList|) time complexity, which at most can be O(|V|).


Finally, instantiating a new Path object and returning it will execute in constant time.



Altogether, we see that the shortestPath method will have a time complexity of O((|V| + |E|)*log(|V|)), as expected.



